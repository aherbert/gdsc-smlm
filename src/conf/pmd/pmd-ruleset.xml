<?xml version="1.0"?>
<!-- #%L
  Genome Damage and Stability Centre SMLM ImageJ Plugins

  Software for single molecule localisation microscopy (SMLM)
  %%
  Copyright (C) 2011 - 2022 Alex Herbert
  %%
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public
  License along with this program.  If not, see
  <http://www.gnu.org/licenses/gpl-3.0.html>.
  #L% -->

<ruleset name="customized"
  xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
  <description>
    This ruleset checks the code for discouraged programming constructs.
  </description>

  <!-- This needs some updating to a set of rules that is OK for each build -->

  <rule ref="category/java/bestpractices.xml">
    <exclude name="UseVarargs" />
    <!--  Allow builders to construct classes using private constructors -->
    <exclude name="AccessorClassGeneration" />
    <!-- Disabled to avoid having to suppress many cases where code is improved by allowing
         reassignment, i.e. small functions where compiled byte size must be minimised to
         allow inlining. -->
    <exclude name="AvoidReassigningParameters" />
    <exclude name="ArrayIsStoredDirectly" />
    <exclude name="MethodReturnsInternalArray" />
    <!-- Allow advanced for loop control -->
    <exclude name="ForLoopVariableCount" />
    <exclude name="AvoidReassigningLoopVariables" />
    <!-- The LoggerUtils class is used to perform logging and guard the log statement -->
    <exclude name="GuardLogStatement" />
  </rule>
  <rule ref="category/java/codestyle.xml/FieldNamingConventions">
    <properties>
      <property name="exclusions" value="serialVersionUID|logger" />
      <property name="violationSuppressXPath"
        value="./descendant-or-self::VariableDeclaratorId[(@Name = 'I' or @Name = 'E') and
          ./ancestor::ClassOrInterfaceDeclaration[@SimpleName = 'LsqVarianceGradientProcedure']] or
          ./ancestor::ClassOrInterfaceDeclaration[@SimpleName ='PrefsKey']"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/LocalVariableNamingConventions">
    <properties>
      <!-- Allow underscores. This simplifies expressions using underscore as divide: 1/2 = 1_2 -->
      <property name="finalVarPattern" value="[a-z][_a-zA-Z0-9]*" />
    </properties>
  </rule>
  <!-- This allows the commonly used construct for decrementing in a for loop. -->
  <rule ref="category/java/errorprone.xml/AssignmentInOperand">
    <properties>
      <property name="allowIncrementDecrement" value="true" />
    </properties>
  </rule>
  <!-- Allow 1 to be used in conditions as a magic number. -->
  <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition">
    <properties>
      <property name="ignoreMagicNumbers" value="-1,0,1,2" />
    </properties>
  </rule>
  <!-- This is to allow private fields to be undocumented. There are specific visibility checks done using Checkstyle. 'private'
    is OK but otherwise fields should be commented. -->
  <rule ref="category/java/documentation.xml/CommentRequired">
    <properties>
      <property name="fieldCommentRequirement" value="Ignored" />
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml">
    <exclude name="MethodArgumentCouldBeFinal" />
    <exclude name="ShortVariable" />
    <exclude name="LongVariable" />
    <exclude name="CommentDefaultAccessModifier" />
    <exclude name="DefaultPackage" />
    <exclude name="CallSuperInConstructor" />
    <exclude name="AbstractNaming" />
    <exclude name="UselessParentheses" />
    <exclude name="AtLeastOneConstructor" />
    <!-- <exclude name="GenericsNaming" /> -->
    <exclude name="OnlyOneReturn" />
    <!-- Allow builders to have setters that return something -->
    <exclude name="LinguisticNaming" />
    <exclude name="UseUnderscoresInNumericLiterals" />
    <!-- Typically used with 'if object != null: use object'.
         This is the main code path and should be first rather than 'if object == null: handle null'  -->
    <exclude name="ConfusingTernary" />
  </rule>
  <rule ref="category/java/design.xml">
    <exclude name="TooManyMethods" />
    <exclude name="LawOfDemeter" />
    <exclude name="LoosePackageCoupling" />
    <!-- Allow builders to be big -->
    <exclude name="ExcessiveClassLength" />
    <exclude name="ExcessivePublicCount" />
    <exclude name="GodClass" />
  </rule>
  <rule ref="category/java/documentation.xml">
    <exclude name="CommentSize" />
  </rule>
  <rule ref="category/java/errorprone.xml">
    <exclude name="BeanMembersShouldSerialize" />
    <!-- This results in overflow during analysis and so is disabled. This rule is known to be poor with Java 5 and later:
      https://github.com/pmd/pmd/issues/873 -->
    <exclude name="DataflowAnomalyAnalysis" />
    <!-- Assigning objects to null to reset the state is allowed. -->
    <exclude name="NullAssignment" />
    <exclude name="ReturnEmptyCollectionRatherThanNull" />
    <exclude name="AvoidFieldNameMatchingMethodName" />
  </rule>
  <rule ref="category/java/multithreading.xml">
    <exclude name="DoNotUseThreads" />
    <exclude name="AvoidUsingVolatile" />
  </rule>
  <rule ref="category/java/performance.xml">
    <!-- This is used for 16-bit images so allow it.  -->
    <exclude name="AvoidUsingShortType" />
    <exclude name="AvoidInstantiatingObjectsInLoops" />
  </rule>

  <rule ref="category/java/bestpractices.xml/SystemPrintln">
    <properties>
      <property name="violationSuppressXPath"
        value="./ancestor::ClassOrInterfaceDeclaration[@SimpleName = 'Version']"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract">
    <properties>
      <property name="violationSuppressXPath"
        value="./ancestor::ClassOrInterfaceDeclaration[@SimpleName ='BaseFunctionSolver'
        or @SimpleName = 'BaseLsqLvmGradientProcedure' or @SimpleName = 'FixedPixelCameraModel'
        or @SimpleName = 'DirectFilter' or @SimpleName = 'Filter'
        or @SimpleName = 'FilePeakResults' or @SimpleName = 'ImageSource'
        ]"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/NoPackage">
    <properties>
      <property name="violationSuppressXPath"
        value="./descendant-or-self::ClassOrInterfaceDeclaration[@SimpleName = 'Smlm_PlugIn']"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/ShortMethodName">
    <properties>
      <!-- Allow samplers to have factory constructor method 'of' -->
      <property name="violationSuppressXPath" value="./ancestor-or-self::MethodDeclaration[@Name = 'of']"/>
    </properties>
  </rule>
  <rule ref="category/java/codestyle.xml/ClassNamingConventions">
    <properties>
      <!-- Allow underscore in ImageJ plugin names -->
      <property name="violationSuppressXPath"
        value="./ancestor-or-self::ClassOrInterfaceDeclaration[matches(@SimpleName, '_PlugIn$')]"/>
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/MoreThanOneLogger">
    <properties>
      <property name="violationSuppressXPath"
        value="./ancestor-or-self::ClassOrInterfaceDeclaration[@SimpleName = 'FitWorker']"/>
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod">
    <properties>
      <!-- The ImageJ 3D View design pattern for mesh objects is to createGeometry() in the
           constructor. The library does not provide a constructor accepting a Geometry argument
           which prevents using factory construction logic outside the constructor. -->
      <property name="violationSuppressXPath"
        value="./ancestor-or-self::ClassOrInterfaceDeclaration[matches(@SimpleName, '^Item.*Mesh$')]"/>
    </properties>
  </rule>

</ruleset>
